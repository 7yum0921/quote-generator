// Ë®≠ÁΩÆ‰ªäÂ§©Êó•Êúü
document.getElementById('quoteDate').value = new Date().toISOString().split('T')[0];

let isDrawing = false;
let currentCanvas = null;

// Áõ£ËÅΩË°®ÂñÆËÆäÂåñ
document.addEventListener('input', updatePreview);
document.addEventListener('change', updatePreview);

// ÂàùÂßãÂåñÈ†êË¶Ω
updatePreview();

function addItem() {
    const itemsList = document.getElementById('itemsList');
    const newItem = document.createElement('div');
    newItem.className = 'item-row';
    newItem.innerHTML = `
        <div class="form-group">
            <label>È†ÖÁõÆÂêçÁ®±</label>
            <input type="text" class="item-name" placeholder="ÊúçÂãôÈ†ÖÁõÆ">
        </div>
        <div class="form-group">
            <label>Êï∏Èáè</label>
            <input type="number" class="item-quantity" value="1" min="1">
        </div>
        <div class="form-group">
            <label>ÂñÆÂÉπ</label>
            <input type="number" class="item-price" placeholder="0">
        </div>
        <div class="form-group">
            <label>ÈáëÈ°ç</label>
            <input type="number" class="item-amount" readonly>
        </div>
        <div class="form-group">
            <button type="button" class="remove-btn" onclick="removeItem(this)" style="margin-top: 24px;">Âà™Èô§</button>
        </div>
    `;
    itemsList.appendChild(newItem);
    
    // ÁÇ∫Êñ∞È†ÖÁõÆÊ∑ªÂä†‰∫ã‰ª∂Áõ£ËÅΩ
    const inputs = newItem.querySelectorAll('input');
    inputs.forEach(input => {
        input.addEventListener('input', updatePreview);
    });
}

function removeItem(button) {
    if (document.querySelectorAll('.item-row').length > 1) {
        button.closest('.item-row').remove();
        updatePreview();
    }
}

function updatePreview() {
    // Êõ¥Êñ∞Âü∫Êú¨Ë≥áË®ä
    document.getElementById('previewQuoteNumber').textContent = 
        document.getElementById('quoteNumber').value || 'Q001';
    document.getElementById('previewDate').textContent = 
        document.getElementById('quoteDate').value || '';
    document.getElementById('previewProjectName').textContent = 
        document.getElementById('projectName').value || '-';
    document.getElementById('previewProviderName').textContent = 
        document.getElementById('providerName').value || '-';
    document.getElementById('previewProviderContact').textContent = 
        document.getElementById('providerContact').value || '-';
    document.getElementById('previewClientName').textContent = 
        document.getElementById('clientName').value || '-';
    document.getElementById('previewClientContact').textContent = 
        document.getElementById('clientContact').value || '-';
    
    // Êõ¥Êñ∞È†ÖÁõÆÂàóË°®
    const itemRows = document.querySelectorAll('.item-row');
    const previewItemsList = document.getElementById('previewItemsList');
    previewItemsList.innerHTML = '';
    
    let subtotal = 0;
    
    itemRows.forEach(row => {
        const name = row.querySelector('.item-name').value || '-';
        const quantity = parseInt(row.querySelector('.item-quantity').value) || 0;
        const price = parseFloat(row.querySelector('.item-price').value) || 0;
        const amount = quantity * price;
        
        // Êõ¥Êñ∞ÈáëÈ°çÊ¨Ñ‰Ωç
        row.querySelector('.item-amount').value = amount;
        
        subtotal += amount;
        
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${name}</td>
            <td class="amount">${quantity}</td>
            <td class="amount">NT$ ${price.toLocaleString()}</td>
            <td class="amount">NT$ ${amount.toLocaleString()}</td>
        `;
        previewItemsList.appendChild(tr);
    });
    
    // Ë®àÁÆóÁ∏ΩË®à
    const total = subtotal;
    
    document.getElementById('total').textContent = `NT$ ${total.toLocaleString()}`;
    
    // Êõ¥Êñ∞ÂÇôË®ª
    const notes = document.getElementById('notes').value;
    const previewNotes = document.getElementById('previewNotes');
    if (notes) {
        previewNotes.innerHTML = `<div style="margin-top: 20px;"><h4>ÂÇôË®ªÔºö</h4><p>${notes}</p></div>`;
    } else {
        previewNotes.innerHTML = '';
    }
}

function startSigning(type) {
    const canvas = document.getElementById(type + 'Signature');
    const placeholder = document.getElementById(type + 'Placeholder');
    const ctx = canvas.getContext('2d');
    
    currentCanvas = canvas;
    placeholder.style.display = 'none';
    canvas.style.display = 'block';
    
    let rect = canvas.getBoundingClientRect();
    let scaleX = canvas.width / rect.width;
    let scaleY = canvas.height / rect.height;
    
    function startDrawing(e) {
        isDrawing = true;
        const x = (e.clientX - rect.left) * scaleX;
        const y = (e.clientY - rect.top) * scaleY;
        ctx.beginPath();
        ctx.moveTo(x, y);
    }
    
    function draw(e) {
        if (!isDrawing) return;
        const x = (e.clientX - rect.left) * scaleX;
        const y = (e.clientY - rect.top) * scaleY;
        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        ctx.strokeStyle = '#000';
        ctx.lineTo(x, y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(x, y);
    }
    
    function stopDrawing() {
        isDrawing = false;
        ctx.beginPath();
        updateSignaturePreview(type);
    }
    
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseout', stopDrawing);
}

function clearSignature(type) {
    const canvas = document.getElementById(type + 'Signature');
    const placeholder = document.getElementById(type + 'Placeholder');
    const ctx = canvas.getContext('2d');
    
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    placeholder.style.display = 'block';
    canvas.style.display = 'none';
    
    // Ê∏ÖÈô§È†êË¶Ω
    document.getElementById(type + 'SignaturePreview').innerHTML = '';
}

function updateSignaturePreview(type) {
    const canvas = document.getElementById(type + 'Signature');
    const preview = document.getElementById(type + 'SignaturePreview');
    const dataURL = canvas.toDataURL();
    preview.innerHTML = `<img src="${dataURL}" style="max-width: 150px; max-height: 60px;">`;
}

// ‰øÆÂæ©ÂæåÁöÑÂàÜ‰∫´ÂäüËÉΩ - Ëß£Ê±∫‰∏≠Êñá‰∫ÇÁ¢ºÂïèÈ°å
function shareQuote() {
    // Êî∂ÈõÜÊâÄÊúâË°®ÂñÆË≥áÊñô
    const quoteData = {
        quoteNumber: document.getElementById('quoteNumber').value,
        quoteDate: document.getElementById('quoteDate').value,
        projectName: document.getElementById('projectName').value,
        providerName: document.getElementById('providerName').value,
        clientName: document.getElementById('clientName').value,
        providerContact: document.getElementById('providerContact').value,
        clientContact: document.getElementById('clientContact').value,
        notes: document.getElementById('notes').value,
        items: []
    };
    
    // Êî∂ÈõÜÈ†ÖÁõÆË≥áÊñô
    document.querySelectorAll('.item-row').forEach(row => {
        const name = row.querySelector('.item-name').value;
        const quantity = row.querySelector('.item-quantity').value;
        const price = row.querySelector('.item-price').value;
        
        quoteData.items.push({
            name: name,
            quantity: quantity,
            price: price
        });
    });
    
    // Êî∂ÈõÜÁ∞ΩÂêç
    const providerCanvas = document.getElementById('providerSignature');
    const clientCanvas = document.getElementById('clientSignature');
    
    if (!isCanvasEmpty(providerCanvas)) {
        quoteData.providerSignature = providerCanvas.toDataURL('image/png');
    }
    
    if (!isCanvasEmpty(clientCanvas)) {
        quoteData.clientSignature = clientCanvas.toDataURL('image/png');
    }
    
    // ÁîüÊàêÂàÜ‰∫´ÈÄ£Áµê - ‰øÆÂæ©‰∏≠ÊñáÁ∑®Á¢ºÂïèÈ°å
    try {
        const jsonStr = JSON.stringify(quoteData);
        // ‰ΩøÁî® TextEncoder Âíå btoa Ê≠£Á¢∫ËôïÁêÜ‰∏≠ÊñáÂ≠óÁ¨¶
        const utf8Bytes = new TextEncoder().encode(jsonStr);
        const binaryString = Array.from(utf8Bytes, byte => String.fromCharCode(byte)).join('');
        const encodedData = btoa(binaryString);
        const shareUrl = `${window.location.origin}${window.location.pathname}?view=client#${encodedData}`;
        
        copyToClipboard(shareUrl);
        
        if (quoteData.providerSignature) {
            showToast('ÂàÜ‰∫´ÈÄ£ÁµêÂ∑≤ÁîüÊàêÔºÅÂåÖÂê´ÂÆåÊï¥ÂÖßÂÆπÂíåÁ∞ΩÂêç ‚úÖ', 'success');
        } else {
            showToast('ÂàÜ‰∫´ÈÄ£ÁµêÂ∑≤ÁîüÊàêÔºÅÂåÖÂê´ÂÆåÊï¥ÂÖßÂÆπ üìã', 'success');
        }
        
        console.log('ÂàÜ‰∫´Ë≥áÊñô:', quoteData); // Èô§ÈåØÁî®
        
    } catch (error) {
        console.error('ÂàÜ‰∫´Â§±Êïó:', error);
        showToast('ÂàÜ‰∫´ÈÄ£ÁµêÁîüÊàêÂ§±ÊïóÔºåË´ãÈáçË©¶', 'error');
    }
}

// Ëá™ÂãïÊ∂àÂ§±ÁöÑÈÄöÁü•Á≥ªÁµ±
function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 10000;
        max-width: 400px;
        padding: 16px 20px;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
        font-size: 14px;
        font-weight: 500;
        color: white;
        transform: translateX(100%);
        transition: transform 0.3s ease;
        ${type === 'success' ? 'background: #10b981;' : ''}
        ${type === 'error' ? 'background: #ef4444;' : ''}
        ${type === 'info' ? 'background: #3b82f6;' : ''}
    `;
    
    toast.innerHTML = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
        toast.style.transform = 'translateX(0)';
    }, 100);
    
    setTimeout(() => {
        toast.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (toast.parentNode) {
                toast.parentNode.removeChild(toast);
            }
        }, 300);
    }, 3000);
}

// Ê™¢Êü•canvasÊòØÂê¶ÁÇ∫Á©∫
function isCanvasEmpty(canvas) {
    const ctx = canvas.getContext('2d');
    const pixelBuffer = new Uint32Array(
        ctx.getImageData(0, 0, canvas.width, canvas.height).data.buffer
    );
    return !pixelBuffer.some(color => color !== 0);
}

// Ë§áË£ΩÂà∞Ââ™Ë≤ºÊùø
function copyToClipboard(text) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(text).then(() => {
            // ÊàêÂäüË§áË£Ω
        }).catch(() => {
            fallbackCopyTextToClipboard(text);
        });
    } else {
        fallbackCopyTextToClipboard(text);
    }
}

// ÂÇôÁî®Ë§áË£ΩÊñπÊ≥ï
        function fallbackCopyTextToClipboard(text) {
            const textArea = document.createElement("textarea");
            textArea.value = text;
            textArea.style.position = "fixed";
            textArea.style.left = "-999999px";
            textArea.style.top = "-999999px";
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();
            
            try {
                document.execCommand('copy');
                // ÊàêÂäüË§áË£ΩÔºå‰∏çÈúÄË¶ÅÈ°çÂ§ñÊèêÁ§∫
            } catch (err) {
                showToast('ÁÑ°Ê≥ïË§áË£ΩÈÄ£ÁµêÔºåË´ãÊâãÂãïË§áË£Ω', 'error');
            }
            
            document.body.removeChild(textArea);
        }
        
        function downloadPDF() {
            // ‰ΩøÁî®html2canvasÂ∞áÈ†êË¶ΩÂçÄÂüüËΩâÁÇ∫ÂúñÁâáÔºåÁÑ∂ÂæåÁîüÊàêPDF
            const previewElement = document.getElementById('quotePreview');
            
            // Ëá®ÊôÇÈö±Ëóè‰∏Ä‰∫õ‰∏çÈúÄË¶ÅÁöÑÂÖÉÁ¥†
            const originalStyle = previewElement.style.cssText;
            previewElement.style.width = '210mm';
            previewElement.style.minHeight = 'auto';
            previewElement.style.padding = '20px';
            previewElement.style.background = 'white';
            
            html2canvas(previewElement, {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                backgroundColor: '#ffffff',
                width: 794, // A4ÂØ¨Â∫¶ÂÉèÁ¥†
                height: 1123 // A4È´òÂ∫¶ÂÉèÁ¥†
            }).then(canvas => {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF('p', 'mm', 'a4');
                
                const imgData = canvas.toDataURL('image/png');
                const imgWidth = 210; // A4ÂØ¨Â∫¶mm
                const pageHeight = 297; // A4È´òÂ∫¶mm
                const imgHeight = (canvas.height * imgWidth) / canvas.width;
                let heightLeft = imgHeight;
                let position = 0;
                
                // Ê∑ªÂä†Á¨¨‰∏ÄÈ†Å
                doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
                
                // Â¶ÇÊûúÂÖßÂÆπË∂ÖÈÅé‰∏ÄÈ†ÅÔºåÊ∑ªÂä†Êñ∞È†ÅÈù¢
                while (heightLeft >= 0) {
                    position = heightLeft - imgHeight;
                    doc.addPage();
                    doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;
                }
                
                // ÊÅ¢Âæ©ÂéüÂßãÊ®£Âºè
                previewElement.style.cssText = originalStyle;
                
                // ÁîüÊàêÊ™îÊ°àÂêçÁ®±
                const projectName = document.getElementById('projectName').value || 'Â∞àÊ°à';
                const quoteNumber = document.getElementById('quoteNumber').value || 'Q001';
                const fileName = projectName + '_' + quoteNumber + '.pdf';
                
                doc.save(fileName);
            }).catch(error => {
                console.error('PDFÁîüÊàêÂ§±Êïó:', error);
                // ÊÅ¢Âæ©ÂéüÂßãÊ®£Âºè
                previewElement.style.cssText = originalStyle;
                alert('PDFÁîüÊàêÂ§±ÊïóÔºåË´ãÈáçË©¶');
            });
        }
        
        // ËºâÂÖ•ÂàÜ‰∫´ÁöÑË≥áÊñô
        window.addEventListener('load', function() {
            const urlParams = new URLSearchParams(window.location.search);
            const viewMode = urlParams.get('view');
            
            // Ê™¢Êü•URL fragment‰∏≠ÁöÑË≥áÊñô
            const hashData = window.location.hash.substring(1);
            const queryData = urlParams.get('data');
            
            const data = hashData || queryData;
            
            if (data) {
                try {
                    // ‰øÆÂæ©‰∏≠ÊñáËß£Á¢ºÂïèÈ°å
                    let quoteData;
                    try {
                        // ÂòóË©¶Êñ∞ÁöÑËß£Á¢ºÊñπÂºèÔºàÊîØÊè¥‰∏≠ÊñáÔºâ
                        const decodedStr = decodeURIComponent(escape(atob(data)));
                        quoteData = JSON.parse(decodedStr);
                    } catch (e) {
                        // ÈôçÁ¥öÂà∞ËàäÁöÑËß£Á¢ºÊñπÂºè
                        try {
                            const decodedStr = atob(data);
                            quoteData = JSON.parse(decodedStr);
                        } catch (e2) {
                            throw new Error('ÁÑ°Ê≥ïËß£Á¢ºË≥áÊñô');
                        }
                    }
                    
                    console.log('ÊàêÂäüËºâÂÖ•Â†±ÂÉπË≥áÊñô:', quoteData);
                    
                    if (viewMode === 'client') {
                        setupClientView(quoteData);
                    } else {
                        loadQuoteData(quoteData);
                    }
                } catch (e) {
                    console.error('ËºâÂÖ•ÂàÜ‰∫´Ë≥áÊñôÂ§±Êïó:', e);
                    if (viewMode === 'client') {
                        document.body.innerHTML = `
                            <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh; font-family: Arial, sans-serif; background: #f8fafc;">
                                <div style="text-align: center; max-width: 500px; padding: 40px; background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                                    <h2 style="color: #ef4444; margin-bottom: 20px;">‚ö†Ô∏è ÈÄ£ÁµêËºâÂÖ•Â§±Êïó</h2>
                                    <p style="color: #6b7280; line-height: 1.6; margin-bottom: 20px;">
                                        ÁÑ°Ê≥ïËºâÂÖ•Â†±ÂÉπÂñÆË≥áÊñôÔºåË´ãËÅØÁπ´ÊúçÂãôÊèê‰æõËÄÖÈáçÊñ∞ÁôºÈÄÅÈÄ£Áµê„ÄÇ
                                    </p>
                                    <p style="color: #9ca3af; font-size: 12px; margin-bottom: 20px;">
                                        ÈåØË™§Ë©≥ÊÉÖÔºö${e.message}
                                    </p>
                                    <button onclick="window.location.href=window.location.origin+window.location.pathname" 
                                            style="background: #3b82f6; color: white; border: none; padding: 12px 24px; border-radius: 8px; cursor: pointer;">
                                        ËøîÂõûÈ¶ñÈ†Å
                                    </button>
                                </div>
                            </div>
                        `;
                    } else {
                        showToast('ÁÑ°Ê≥ïËºâÂÖ•Â†±ÂÉπÂñÆË≥áÊñôÔºåË´ãÊ™¢Êü•ÈÄ£ÁµêÊòØÂê¶ÂÆåÊï¥', 'error');
                    }
                }
            } else if (viewMode === 'client') {
                document.body.innerHTML = `
                    <div style="display: flex; justify-content: center; align-items: center; min-height: 100vh; font-family: Arial, sans-serif; background: #f8fafc;">
                        <div style="text-align: center; max-width: 500px; padding: 40px; background: white; border-radius: 12px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
                            <h2 style="color: #f59e0b; margin-bottom: 20px;">üìÑ Êâæ‰∏çÂà∞Â†±ÂÉπÂñÆ</h2>
                            <p style="color: #6b7280; line-height: 1.6;">
                                Ë´ãÁ¢∫Ë™çÊÇ®‰ΩøÁî®ÁöÑÊòØÂÆåÊï¥ÁöÑÂ†±ÂÉπÂñÆÈÄ£Áµê„ÄÇ
                            </p>
                        </div>
                    </div>
                `;
            }
        });
        
        // Ë®≠ÁΩÆÂÆ¢Êà∂Ê™¢Ë¶ñÊ®°Âºè
        function setupClientView(quoteData) {
            // Èö±ËóèË°®ÂñÆÂçÄÂüüÔºåÂè™È°ØÁ§∫È†êË¶ΩÂíåÁ∞ΩÂêçÂäüËÉΩ
            const formSection = document.querySelector('.form-section');
            const previewSection = document.querySelector('.preview-section');
            
            // ‰øÆÊîπÈ†ÅÈù¢Ê®ôÈ°å
            document.querySelector('.header h1').textContent = 'Â†±ÂÉπÂñÆÁ¢∫Ë™ç';
            document.querySelector('.header p').textContent = 'Ë´ãÊ™¢Ë¶ñÂ†±ÂÉπÂÖßÂÆπ‰∏¶ÈÄ≤Ë°åÁ∞ΩÂêçÁ¢∫Ë™ç';
            
            // Ë™øÊï¥‰ΩàÂ±Ä
            document.querySelector('.main-content').style.gridTemplateColumns = '1fr';
            formSection.style.display = 'none';
            previewSection.style.maxWidth = '900px';
            previewSection.style.margin = '0 auto';
            previewSection.style.padding = '40px';
            
            // ËºâÂÖ•Ë≥áÊñôÂà∞È†êË¶Ω
            loadQuoteData(quoteData);
            
            // Âú®È†êË¶ΩÂçÄÂüüÂ∫ïÈÉ®Ê∑ªÂä†ÂÆ¢Êà∂Á∞ΩÂêçÂçÄ
            const clientSignatureSection = document.createElement('div');
            clientSignatureSection.innerHTML = `
                <div style="margin-top: 40px; padding: 20px; border-top: 2px solid #e5e7eb;">
                    <h4 style="margin-bottom: 20px; text-align: center;">ÂÆ¢Êà∂Á∞ΩÂêçÁ¢∫Ë™ç</h4>
                    <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 60px; max-width: 600px; margin: 0 auto;">
                        <div style="text-align: center;">
                            <div style="border: 1px dashed #d1d5db; height: 120px; display: flex; align-items: center; justify-content: center; border-radius: 6px; cursor: pointer; background: #f9fafb;" onclick="startClientSigning()">
                                <canvas id="clientSignatureClient" width="200" height="120" style="width: 100%; height: 100%; border-radius: 6px; display: none;"></canvas>
                                <span id="clientPlaceholderClient">ÈªûÊìäÊ≠§ËôïÁ∞ΩÂêç</span>
                            </div>
                            <div style="margin-top: 10px;">
                                <button type="button" onclick="clearClientSignature()" style="background: #6b7280; color: white; border: none; padding: 6px 12px; border-radius: 4px; cursor: pointer;">Ê∏ÖÈô§Á∞ΩÂêç</button>
                                <button type="button" onclick="confirmQuote()" style="background: #10b981; color: white; border: none; padding: 6px 16px; border-radius: 4px; cursor: pointer; margin-left: 10px;">Á¢∫Ë™çÂ†±ÂÉπÂñÆ</button>
                            </div>
                            <div style="margin-top: 15px;">
                                <p style="color: #6b7280; font-size: 14px;">Áî≤ÊñπÁ∞ΩÂêç</p>
                            </div>
                        </div>
                        <div style="text-align: center;">
                            <div style="height: 120px; display: flex; align-items: center; justify-content: center;">
                                <div id="providerSignatureDisplay"></div>
                            </div>
                            <div style="margin-top: 25px;">
                                <p style="color: #6b7280; font-size: 14px;">‰πôÊñπÁ∞ΩÂêç</p>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            previewSection.appendChild(clientSignatureSection);
            
            // È°ØÁ§∫‰πôÊñπÁ∞ΩÂêçÔºàÂ¶ÇÊûúÊúâÁöÑË©±Ôºâ
            const providerSig = quoteData.ps || quoteData.providerSignature;
            if (providerSig) {
                document.getElementById('providerSignatureDisplay').innerHTML = 
                    `<img src="${providerSig}" style="max-width: 150px; max-height: 60px; border: 1px solid #d1d5db; border-radius: 4px;">`;
            }
        }
        
        // ÂÆ¢Êà∂Á∞ΩÂêçÂäüËÉΩ
        function startClientSigning() {
            const canvas = document.getElementById('clientSignatureClient');
            const placeholder = document.getElementById('clientPlaceholderClient');
            const ctx = canvas.getContext('2d');
            
            placeholder.style.display = 'none';
            canvas.style.display = 'block';
            
            let isDrawing = false;
            let rect = canvas.getBoundingClientRect();
            let scaleX = canvas.width / rect.width;
            let scaleY = canvas.height / rect.height;
            
            function startDrawing(e) {
                isDrawing = true;
                const x = (e.clientX - rect.left) * scaleX;
                const y = (e.clientY - rect.top) * scaleY;
                ctx.beginPath();
                ctx.moveTo(x, y);
            }
            
            function draw(e) {
                if (!isDrawing) return;
                const x = (e.clientX - rect.left) * scaleX;
                const y = (e.clientY - rect.top) * scaleY;
                ctx.lineWidth = 2;
                ctx.lineCap = 'round';
                ctx.strokeStyle = '#000';
                ctx.lineTo(x, y);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(x, y);
            }
            
            function stopDrawing() {
                isDrawing = false;
                ctx.beginPath();
            }
            
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);
        }
        
        function clearClientSignature() {
            const canvas = document.getElementById('clientSignatureClient');
            const placeholder = document.getElementById('clientPlaceholderClient');
            const ctx = canvas.getContext('2d');
            
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            placeholder.style.display = 'block';
            canvas.style.display = 'none';
        }
        
        function confirmQuote() {
            const canvas = document.getElementById('clientSignatureClient');
            if (isCanvasEmpty(canvas)) {
                alert('Ë´ãÂÖàÁ∞ΩÂêçÂÜçÁ¢∫Ë™çÂ†±ÂÉπÂñÆ');
                return;
            }
            
            const signature = canvas.toDataURL();
            
            // Êõ¥Êñ∞È†êË¶ΩÂçÄÂüüÁöÑÂÆ¢Êà∂Á∞ΩÂêç
            const clientSignaturePreview = document.querySelector('.signature-preview .signature-area:last-child div');
            if (clientSignaturePreview) {
                clientSignaturePreview.innerHTML = `<img src="${signature}" style="max-width: 150px; max-height: 60px;">`;
            }
            
            // Èö±ËóèÁ∞ΩÂêçÂçÄÂüüÔºåÈ°ØÁ§∫ÂÆåÊàêÁãÄÊÖã
            const signatureSection = document.querySelector('[onclick="startClientSigning()"]').closest('div[style*="margin-top: 40px"]');
            signatureSection.innerHTML = `
                <div style="margin-top: 40px; display: flex; justify-content: center;">
                    <div style="width: 100%; max-width: 600px; padding: 30px; background: #f0f9ff; border-radius: 12px; border: 2px solid #10b981;">
                        <div style="color: #059669; font-size: 20px; font-weight: 600; margin-bottom: 20px; text-align: center;">
                            ‚úì Â†±ÂÉπÂñÆÁ¢∫Ë™çÂÆåÊàêÔºÅ
                        </div>
                        <div style="color: #374151; margin-bottom: 25px; line-height: 1.6; text-align: center; font-size: 16px;">
                            ÊÑüË¨ùÊÇ®ÁöÑÁ¢∫Ë™ç„ÄÇË´ã‰∏ãËºâÂÆåÊï¥ÁöÑÂ†±ÂÉπÂñÆPDFÊ™îÊ°àÔºå‰∏¶ÂõûÂÇ≥Áµ¶ÊàëÂÄë‰ª•ÂÆåÊàêÊµÅÁ®ã„ÄÇ
                        </div>
                        <div style="display: flex; justify-content: center; margin-bottom: 20px;">
                            <button onclick="downloadSignedPDF()" style="background: #3b82f6; color: white; border: none; padding: 15px 30px; border-radius: 8px; cursor: pointer; font-weight: 500; font-size: 16px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                                üìÑ ‰∏ãËºâÂÆåÊï¥PDF
                            </button>
                        </div>
                        <div style="padding: 15px; background: #f9fafb; border-radius: 8px; color: #6b7280; font-size: 14px; text-align: center;">
                            üí° Ë´ãÂ∞á‰∏ãËºâÁöÑPDFÊ™îÊ°àÂõûÂÇ≥Áµ¶ÊúçÂãôÊèê‰æõËÄÖ
                        </div>
                    </div>
                </div>
            `;
            
            // ÂÑ≤Â≠òÁ∞ΩÂêçË≥áÊñôÂà∞ÂÖ®ÂüüËÆäÊï∏‰ª•‰æõ‰∏ãËºâ‰ΩøÁî®
            window.clientSignatureData = signature;
            
            console.log('ÂÆ¢Êà∂Á∞ΩÂêçÂÆåÊàê:', signature);
        }
        
        // ‰∏ãËºâÂ∑≤Á∞ΩÂêçÁöÑÂÆåÊï¥PDF
        function downloadSignedPDF() {
            // Ëá®ÊôÇÊõ¥Êñ∞È†êË¶ΩÂçÄÂüü‰ª•ÂåÖÂê´ÂÆ¢Êà∂Á∞ΩÂêç
            const previewElement = document.getElementById('quotePreview');
            const clientSignatureArea = previewElement.querySelector('.signature-preview .signature-area:last-child div');
            
            // Á¢∫‰øùÂÆ¢Êà∂Á∞ΩÂêçÈ°ØÁ§∫Âú®È†êË¶Ω‰∏≠
            if (window.clientSignatureData && clientSignatureArea) {
                clientSignatureArea.innerHTML = `<img src="${window.clientSignatureData}" style="max-width: 150px; max-height: 60px;">`;
            }
            
            // ‰ΩøÁî®ÁèæÊúâÁöÑPDFÁîüÊàêÂäüËÉΩ
            const originalStyle = previewElement.style.cssText;
            previewElement.style.width = '210mm';
            previewElement.style.minHeight = 'auto';
            previewElement.style.padding = '20px';
            previewElement.style.background = 'white';
            
            html2canvas(previewElement, {
                scale: 2,
                useCORS: true,
                allowTaint: true,
                backgroundColor: '#ffffff',
                width: 794,
                height: 1123
            }).then(canvas => {
                const { jsPDF } = window.jspdf;
                const doc = new jsPDF('p', 'mm', 'a4');
                
                const imgData = canvas.toDataURL('image/png');
                const imgWidth = 210;
                const pageHeight = 297;
                const imgHeight = (canvas.height * imgWidth) / canvas.width;
                let heightLeft = imgHeight;
                let position = 0;
                
                doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                heightLeft -= pageHeight;
                
                while (heightLeft >= 0) {
                    position = heightLeft - imgHeight;
                    doc.addPage();
                    doc.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
                    heightLeft -= pageHeight;
                }
                
                previewElement.style.cssText = originalStyle;
                
                // ÂèñÂæóÂ†±ÂÉπÂñÆË≥áË®ä
                const hashData = window.location.hash.substring(1);
                const urlParams = new URLSearchParams(window.location.search);
                const queryData = urlParams.get('data');
                const data = hashData || queryData;
                
                let projectName = 'Â∞àÊ°à';
                let quoteNumber = 'Q001';
                
                if (data) {
                    try {
                        const quoteData = JSON.parse(atob(data + '==='.substring(0, (4 - data.length % 4) % 4)));
                        projectName = quoteData.pn || quoteData.projectName || 'Â∞àÊ°à';
                        quoteNumber = quoteData.qn || quoteData.quoteNumber || 'Q001';
                    } catch (e) {
                        console.error('ÁÑ°Ê≥ïËß£ÊûêÂ†±ÂÉπÂñÆË≥áÊñô');
                    }
                }
                
                const fileName = `${projectName}_${quoteNumber}_Â∑≤Á¢∫Ë™ç.pdf`;
                doc.save(fileName);
                
                // È°ØÁ§∫‰∏ãËºâÂÆåÊàêÊèêÁ§∫
                setTimeout(() => {
                    showToast('PDF‰∏ãËºâÂÆåÊàêÔºÅË´ãÂ∞áÊ™îÊ°àÂõûÂÇ≥Áµ¶ÊúçÂãôÊèê‰æõËÄÖ', 'success');
                }, 500);
                
            }).catch(error => {
                console.error('PDFÁîüÊàêÂ§±Êïó:', error);
                previewElement.style.cssText = originalStyle;
                alert('PDFÁîüÊàêÂ§±ÊïóÔºåË´ãÈáçË©¶');
            });
        }
        
        // ËºâÂÖ•Â†±ÂÉπË≥áÊñôÁöÑÈÄöÁî®ÂáΩÊï∏
        function loadQuoteData(quoteData) {
            // ËôïÁêÜÁ∞°ÂåñÁöÑÊ¨Ñ‰ΩçÂêçÁ®±Êò†Â∞Ñ
            const fieldMapping = {
                'qn': 'quoteNumber',
                'qd': 'quoteDate', 
                'pn': 'projectName',
                'pr': 'providerName',
                'cl': 'clientName',
                'prc': 'providerContact',
                'clc': 'clientContact',
                'nt': 'notes'
            };
            
            // Â°´ÂÖ•Âü∫Êú¨Ë≥áÊñô
            Object.keys(fieldMapping).forEach(shortKey => {
                if (quoteData[shortKey]) {
                    const element = document.getElementById(fieldMapping[shortKey]);
                    if (element) {
                        element.value = quoteData[shortKey];
                    }
                }
            });
            
            // ËôïÁêÜËàäÊ†ºÂºèÁöÑÂêëÂæåÁõ∏ÂÆπÊÄß
            Object.keys(quoteData).forEach(key => {
                const element = document.getElementById(key);
                if (element && typeof quoteData[key] === 'string') {
                    element.value = quoteData[key];
                }
            });
            
            // ËºâÂÖ•È†ÖÁõÆË≥áÊñô
            const items = quoteData.it || quoteData.items || [];
            if (items.length > 0) {
                const itemsList = document.getElementById('itemsList');
                itemsList.innerHTML = ''; // Ê∏ÖÁ©∫ÁèæÊúâÈ†ÖÁõÆ
                
                items.forEach(item => {
                    const itemRow = document.createElement('div');
                    itemRow.className = 'item-row';
                    itemRow.innerHTML = `
                        <div class="form-group">
                            <label>È†ÖÁõÆÂêçÁ®±</label>
                            <input type="text" class="item-name" value="${item.n || item.name || ''}" placeholder="ÊúçÂãôÈ†ÖÁõÆ">
                        </div>
                        <div class="form-group">
                            <label>Êï∏Èáè</label>
                            <input type="number" class="item-quantity" value="${item.q || item.quantity || 1}" min="1">
                        </div>
                        <div class="form-group">
                            <label>ÂñÆÂÉπ</label>
                            <input type="number" class="item-price" value="${item.p || item.price || 0}" placeholder="0">
                        </div>
                        <div class="form-group">
                            <label>ÈáëÈ°ç</label>
                            <input type="number" class="item-amount" readonly>
                        </div>
                        <div class="form-group">
                            <button type="button" class="remove-btn" onclick="removeItem(this)" style="margin-top: 24px;">Âà™Èô§</button>
                        </div>
                    `;
                    itemsList.appendChild(itemRow);
                    
                    // ÁÇ∫Êñ∞È†ÖÁõÆÊ∑ªÂä†‰∫ã‰ª∂Áõ£ËÅΩ
                    const inputs = itemRow.querySelectorAll('input');
                    inputs.forEach(input => {
                        input.addEventListener('input', updatePreview);
                    });
                });
            }
            
            // ËºâÂÖ•Á∞ΩÂêç
            const providerSig = quoteData.ps || quoteData.providerSignature;
            const clientSig = quoteData.cs || quoteData.clientSignature;
            
            if (providerSig) {
                document.getElementById('providerSignaturePreview').innerHTML = 
                    `<img src="${providerSig}" style="max-width: 150px; max-height: 60px;">`;
            }
            
            if (clientSig) {
                document.getElementById('clientSignaturePreview').innerHTML = 
                    `<img src="${clientSig}" style="max-width: 150px; max-height: 60px;">`;
            }
            
            updatePreview();
        }
    </script>
</body>
</html>
